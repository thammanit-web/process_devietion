generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "sqlserver"
  url       = env("DATABASE_URL")
}

model IncidentReport {
  id                   Int       @id @default(autoincrement())
  ref_no               String
  priority             String?
  topic                String?
  category_report      String?
  machine_code         String?
  machine_name         String?
  incident_date        DateTime?
  incident_description String?
  summary_incident     String?
  reporter_name        String?
  report_date          DateTime?
  status_report        String?
  head_approve         String?

  ReportFiles           ReportFile[]
  investigationMeetings InvestigationMeeting[]
}

model ReportFile {
  id                 Int             @id @default(autoincrement())
  file_url           String?
  incident_report_id Int?
  incidentReport     IncidentReport? @relation(fields: [incident_report_id], references: [id], onDelete: Cascade)
}

model InvestigationMeeting {
  id                      Int               @id @default(autoincrement())
  incident_report_id      Int?
  topic_meeting           String?
  scheduled_date          DateTime?
  meeting_date            DateTime?
  summary_meeting         String?
  investigation_signature String?
  manager_approve         String?
  incidentReport          IncidentReport?   @relation(fields: [incident_report_id], references: [id], onDelete: NoAction)
  problemResolutions      ProblemSolution[]
  meetingFiles            MeetingFile[]
  managerApproves         ManagerApprove[]
  SelectedUser            SelectedUser[]
}

model SelectedUser {
  id                   Int                   @id @default(autoincrement())
  userId               String?
  display_name         String?
  email                String?
  meeting_id           Int?
  investigationMeeting InvestigationMeeting? @relation(fields: [meeting_id], references: [id], onDelete: Cascade)
}

model MeetingFile {
  id                   Int                   @id @default(autoincrement())
  file_url             String?
  meeting_id           Int?
  investigationMeeting InvestigationMeeting? @relation(fields: [meeting_id], references: [id], onDelete: Cascade)
}

model ProblemSolution {
  id                    Int                    @id @default(autoincrement())
  meeting_id            Int?
  topic_solution        String
  assign_to             String?
  email_assign          String?
  target_finish         DateTime?
  status_solution       String?
  manager_approve       String?
  investigationMeeting  InvestigationMeeting?  @relation(fields: [meeting_id], references: [id], onDelete: Cascade)
  troubleshootSolutions TroubleshootSolution[]
  managerApproves       ManagerApprove[]
}

model TroubleshootSolution {
  id                  Int              @id @default(autoincrement())
  solution_id         Int
  result_troubleshoot String?
  file_summary        String?
  finish_date         DateTime?
  problemSolution     ProblemSolution? @relation(fields: [solution_id], references: [id], onDelete: Cascade)
}

model ManagerApprove {
  id                   Int                   @id @default(autoincrement())
  meeting_id           Int?
  solution_id          Int?
  comment_solution     String?
  comment_troubleshoot String?
  investigationMeeting InvestigationMeeting? @relation(fields: [meeting_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  problemSolution      ProblemSolution? @relation(fields: [solution_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
